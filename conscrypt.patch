diff --git a/api-doclet/build.gradle b/api-doclet/build.gradle
index 74f015a..dfdc35b 100644
--- a/api-doclet/build.gradle
+++ b/api-doclet/build.gradle
@@ -1,7 +1,7 @@
 description = 'Conscrypt: API Doclet'
 
 dependencies {
-    compile fileTree(dir: "${System.properties['java.home']}/../lib", include: '*tools.jar')
+    compile fileTree(dir: "${System.properties['java.home']}/../lib")
 }
 
 // Don't include this artifact in the distribution.
diff --git a/build.gradle b/build.gradle
index f9169b8..6079d2a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -71,6 +71,7 @@ subprojects {
         boringsslIncludeDir = normalizePath("$boringsslHome/include")
         boringssl32BuildDir = normalizePath("$boringsslHome/build32")
         boringssl64BuildDir = normalizePath("$boringsslHome/build64")
+        boringsslppc64leBuildDir = normalizePath("$boringsslHome/buildppc64le")
 
         if (project.hasProperty("jdkHome")) {
             jdkHome = project.property("jdkHome")
@@ -83,11 +84,12 @@ subprojects {
 
         build32Bit = file("$boringssl32BuildDir").exists()
         build64Bit = file("$boringssl64BuildDir").exists()
+        buildppc64le = file("$boringsslppc64leBuildDir").exists()
 
         // Ensure the environment is configured properly.
         assert file("$boringsslHome").exists()
         assert file("$boringsslIncludeDir").exists()
-        assert build32Bit || build64Bit
+        assert build32Bit || build64Bit || buildppc64le
         assert file("$jdkHome").exists()
         assert file("$jdkIncludeDir").exists()
 
diff --git a/constants/build.gradle b/constants/build.gradle
index c1520ac..3e0564d 100644
--- a/constants/build.gradle
+++ b/constants/build.gradle
@@ -28,6 +28,29 @@ artifacts {
 }
 
 model {
+
+
+  toolChains {
+
+    clang(Clang)
+
+    gcc(Gcc){
+        target("linux_ppc64le") {
+	        cppCompiler.executable = "/usr/bin/gcc"
+	    }
+    }
+  }
+  platforms {
+    x86_32 {
+      architecture "x86"
+    }
+    x86_64 {
+      architecture "x86_64"
+    }
+    linux_ppc64le {
+      architecture "linux_ppc64le"
+    }
+  }
     components {
         // Builds exe/ which generates the content of NativeConstants.java
         gen(NativeExecutableSpec) {
diff --git a/openjdk-integ-tests/src/test/java/org/conscrypt/javax/net/ssl/SSLEngineTest.java b/openjdk-integ-tests/src/test/java/org/conscrypt/javax/net/ssl/SSLEngineTest.java
index 63fc3f5..ad073f7 100644
--- a/openjdk-integ-tests/src/test/java/org/conscrypt/javax/net/ssl/SSLEngineTest.java
+++ b/openjdk-integ-tests/src/test/java/org/conscrypt/javax/net/ssl/SSLEngineTest.java
@@ -30,6 +30,7 @@ import java.nio.ByteBuffer;
 import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;
 import java.util.Arrays;
+import java.util.List;
 import java.util.HashSet;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
@@ -582,9 +583,13 @@ public class SSLEngineTest {
                         assertNotNull(session);
                         // By the point of the handshake where we're validating certificates,
                         // the hostname is known and the cipher suite should be agreed
+
                         assertEquals(referenceContext.host.getHostName(), session.getPeerHost());
-                        assertEquals(referenceEngine.getEnabledCipherSuites()[0],
-                            session.getCipherSuite());
+
+			String sessionSuite = session.getCipherSuite();
+                        List<String> enabledSuites =
+                            Arrays.asList(referenceEngine.getEnabledCipherSuites());
+                        assertTrue(enabledSuites.contains(sessionSuite));
                         wasCalled[0] = true;
                     } catch (Exception e) {
                         throw new CertificateException("Something broke", e);
@@ -646,9 +651,13 @@ public class SSLEngineTest {
                         // By the point of the handshake where we're validating client certificates,
                         // the cipher suite should be agreed and the server's own certificates
                         // should have been delivered
-                        assertEquals(referenceEngine.getEnabledCipherSuites()[0],
-                            session.getCipherSuite());			
+			String sessionSuite = session.getCipherSuite();
+                        List<String> enabledSuites =
+                            Arrays.asList(referenceEngine.getEnabledCipherSuites());
+                        assertTrue(enabledSuites.contains(sessionSuite));   
                         assertNotNull(session.getLocalCertificates());
                         
                         assertEquals("CN=localhost",
                             ((X509Certificate) session.getLocalCertificates()[0])
                                 .getSubjectDN().getName());
diff --git a/openjdk-integ-tests/src/test/java/org/conscrypt/javax/net/ssl/SSLSocketTest.java b/openjdk-integ-tests/src/test/java/org/conscrypt/javax/net/ssl/SSLSocketTest.java
index 72bc79e..630be3e 100644
--- a/openjdk-integ-tests/src/test/java/org/conscrypt/javax/net/ssl/SSLSocketTest.java
+++ b/openjdk-integ-tests/src/test/java/org/conscrypt/javax/net/ssl/SSLSocketTest.java
@@ -511,8 +511,11 @@ public class SSLSocketTest {
                         // By the point of the handshake where we're validating certificates,
                         // the hostname is known and the cipher suite should be agreed
                         assertEquals(referenceContext.host.getHostName(), session.getPeerHost());
-                        assertEquals(referenceClientSocket.getEnabledCipherSuites()[0],
-                            session.getCipherSuite());
+                        String sessionSuite = session.getCipherSuite();
+                        List<String> enabledSuites =
+                            Arrays.asList(referenceClientSocket.getEnabledCipherSuites());
+                        assertTrue(enabledSuites.contains(sessionSuite));
+
                         wasCalled[0] = true;
                     } catch (Exception e) {
                         throw new CertificateException("Something broke", e);
@@ -592,8 +595,12 @@ public class SSLSocketTest {
                         // By the point of the handshake where we're validating client certificates,
                         // the cipher suite should be agreed and the server's own certificates
                         // should have been delivered
-                        assertEquals(referenceClientSocket.getEnabledCipherSuites()[0],
-                            session.getCipherSuite());

+                        String sessionSuite = session.getCipherSuite();
+                        List<String> enabledSuites =
+                            Arrays.asList(referenceClientSocket.getEnabledCipherSuites());
+                        assertTrue(enabledSuites.contains(sessionSuite));

                         assertNotNull(session.getLocalCertificates());
                         assertEquals("CN=localhost",
                             ((X509Certificate) session.getLocalCertificates()[0])
diff --git a/openjdk-uber/build.gradle b/openjdk-uber/build.gradle
index a9078df..c987d22 100644
--- a/openjdk-uber/build.gradle
+++ b/openjdk-uber/build.gradle
@@ -3,7 +3,7 @@ description = 'Conscrypt: OpenJdk UberJAR'
 ext {
     buildUberJar = Boolean.parseBoolean(System.getProperty('org.conscrypt.openjdk.buildUberJar', 'false'))
     uberJarClassifiers = (System.getProperty('org.conscrypt.openjdk.uberJarClassifiers',
-            'osx-x86_64,linux-x86_64,windows-x86,windows-x86_64')).split(',')
+            'osx-x86_64,linux-x86_64,windows-x86,windows-x86_64,linux-ppc64le')).split(',')
     classesDir = "${buildDir}/classes"
     resourcesDir = "${buildDir}/resources"
     sourcesDir = "${buildDir}/sources"
diff --git a/openjdk/build.gradle b/openjdk/build.gradle
index ef05765..61a4f2b 100644
--- a/openjdk/build.gradle
+++ b/openjdk/build.gradle
@@ -12,9 +12,11 @@ ext {
     // Build the list of classifiers that will be used in the build.
     arch32Name = 'x86'
     arch64Name = 'x86_64'
+    archppc64leName = 'ppc64le'
     nativeClassifiers = []
     nativeClassifier64Bit = null
     nativeClassifier32Bit = null
+    nativeClassifierppc64le = null 
     preferredClassifier = null
     preferredSourceSet = null
     preferredNativeFileDir = null
@@ -35,6 +37,17 @@ ext {
             preferredNativeFileDir = nativeResourcesDir(preferredClassifier)
         }
     }
+    if (buildppc64le) {
+        nativeClassifierppc64le = classifierFor(osName, archppc64leName)
+
+        nativeClassifiers += nativeClassifierppc64le
+
+        if (preferredClassifier == null) {
+            preferredClassifier = nativeClassifierppc64le
+            preferredSourceSet = sourceSetName(preferredClassifier)
+            preferredNativeFileDir = nativeResourcesDir(preferredClassifier)
+        }
+    }
 }
 
 sourceSets {
@@ -298,8 +311,23 @@ model {
         x86_64 {
             architecture arch64Name
         }
+        ppc64le {
+            architecture archppc64leName
+        }
     }
 
+  toolChains {
+
+    clang(Clang)
+
+    gcc(Gcc){
+        target("ppc64le") {
+                cppCompiler.executable = "/usr/bin/gcc"
+            }
+    }
+  }
+
+
     buildTypes {
         release
     }
@@ -309,6 +337,7 @@ model {
         conscrypt_openjdk_jni(NativeLibrarySpec) {
             if (build32Bit) { targetPlatform arch32Name }
             if (build64Bit) { targetPlatform arch64Name }
+            if (buildppc64le) { targetPlatform archppc64leName }
 
             sources {
                 cpp {
@@ -326,12 +355,16 @@ model {
 
                     // Set up 32-bit vs 64-bit build
                     def building64Bit = false
+                    def buildingppc64leBit = false
                     def libPath
                     if (targetPlatform.getArchitecture().getName() == "x86") {
                         libPath = "$boringssl32BuildDir"
                     } else if (targetPlatform.getArchitecture().getName() == "x86-64") {
                         libPath = "$boringssl64BuildDir"
                         building64Bit = true
+                    } else if (targetPlatform.getArchitecture().getName() == "ppc64le") {
+                        libPath = "$boringsslppc64leBuildDir"
+                        buildingppc64leBit = true
                     } else {
                         throw new GradleException("Unknown architecture: " +
                                 targetPlatform.getArchitecture().name)
